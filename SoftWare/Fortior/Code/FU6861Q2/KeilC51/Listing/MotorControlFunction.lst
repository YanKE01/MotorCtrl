C51 COMPILER V9.52.0.0   MOTORCONTROLFUNCTION                                              04/01/2023 22:13:42 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE MOTORCONTROLFUNCTION
OBJECT MODULE PLACED IN .\Output\MotorControlFunction.obj
COMPILER INVOKED BY: D:\IDE\keil\C51\BIN\C51.EXE ..\User\Source\Function\MotorControlFunction.c LARGE OMF2 WARNINGLEVEL(
                    -0) BROWSE INCDIR(..\User\Include;..\FU68xx_Hardware_Driver\Include) DEBUG PRINT(.\Listing\MotorControlFunction.lst) TABS
                    -(2) OBJECT(.\Output\MotorControlFunction.obj)

line level    source

   1          /**
   2           * @copyright (C) COPYRIGHT 2022 Fortiortech Shenzhen
   3           * @file      MotorControlFunction.c
   4           * @author    Fortiortech  Appliction Team
   5           * @since     Create:2021-11-07
   6           * @date      Last modify:2022-07-14
   7           * @brief    
   8           */
   9          
  10          #include <FU68xx_2.h>
  11          #include <Myproject.h>
  12          
  13          
  14          RPD_TypeDef             xdata   RPD_Status;
  15          RPD_Param_TypeDef       xdata   RPDPara;
  16          MotorTailWindTypeDef    xdata   TailWindDetect;
  17          BEMFDetect_TypeDef      xdata   BEMFDetect;
  18          CurrentOffset           xdata   mcCurOffset;
  19          
  20          /** 
  21           * @brief      ÂØπFOCÁöÑÁõ∏ÂÖ≥ÂØÑÂ≠òÂô®ËøõË°åÈÖçÁΩÆ,ÂÖàÊ∏ÖÁêÜÂØÑÂ≠òÂô®ÔºåÂêéÈÖçÁΩÆÔºåÊúÄÂêé‰ΩøËÉΩ
  22           * @exception  ÂàùÂßãÂåñFOCÔºåÈúÄË¶ÅÂÖàÂÖ≥Èó≠DRVIVERÔºåÂØπFOCÂØÑÂ≠òÂô®ÈÖçÁΩÆÂÆåÊàêÂêéÔºå‰ΩøËÉΩFOCÂÜçÊâìÂºÄ
             -DRVIVER,Âê¶ÂàôÂèØËÉΩÂØºËá¥Á¨¨‰∏ÄÊãçÁîµÊµÅÈááÊ†∑ÈîôËØØ
  23           */
  24          void FOC_Init(void)
  25          {
  26   1          /* -----‰ΩøËÉΩFOC ----- */
  27   1          ClrBit(DRV_CR, FOCEN);
  28   1          SetBit(DRV_CR, FOCEN);
  29   1          /* -----ÈÖçÁΩÆFOCÂØÑÂ≠òÂô® ----- */
  30   1          FOC_CR1         = 0;                                                                            // Ê∏Ö
             -Èõ∂ FOC_CR1
  31   1          FOC_CR2         = 0;                                                                            // Ê∏Ö
             -Èõ∂ FOC_CR2
  32   1          FOC_IDREF       = 0;                                                                            // Ê∏Ö
             -Èõ∂ Id
  33   1          FOC_IQREF       = 0;                                                                            // Ê∏Ö
             -Èõ∂ Iq
  34   1          FOC__THETA      = 0;                                                                            // Ê∏Ö
             -Èõ∂ ËßíÂ∫¶
  35   1          FOC_RTHEACC     = 0;                                                                            // Ê∏Ö
             -Èõ∂ Áà¨Âù°ÂáΩÊï∞ÁöÑÂàùÂßãÂä†ÈÄüÂ∫¶
  36   1          FOC__RTHESTEP   = 0;                                                                            //
  37   1          FOC__RTHECNT    = 0;                                                                            //
  38   1          FOC_THECOMP    = _Q15(0.0 / 180.0);                                                            // SMO 
             -‰º∞ÁÆóË°•ÂÅøËßí
  39   1          FOC_THECOR         = 0x04;                                                                     // ËØØÂ
             -∑ÆËßíÂ∫¶Ë°•ÂÅø
  40   1          #if (FG_Enable==1)
                  FOC_KFG         = FG_Value;
                  #endif
  43   1          //      SetBit(FOC_CR2, UQD);
  44   1          //    SetBit(FOC_CR2, UDD);
C51 COMPILER V9.52.0.0   MOTORCONTROLFUNCTION                                              04/01/2023 22:13:42 PAGE 2   

  45   1          /* -----ÁîµÊµÅÁéØÂèÇÊï∞ÈÖçÁΩÆ ----- */
  46   1          FOC_DMAX            = DOUTMAX;
  47   1          FOC_DMIN            = DOUTMIN;
  48   1          FOC_QMAX            = QOUTMAX;
  49   1          FOC_QMIN            = QOUTMIN;
  50   1          /* -----‰ΩçÁΩÆ‰º∞ÁÆóÂèÇÊï∞ÈÖçÁΩÆ ----- */
  51   1          FOC_EK1             = OBS_K1T;
  52   1          FOC_EK2             = OBS_K2T;
  53   1          FOC_EK3             = OBS_K3T;
  54   1          FOC_EK4             = OBS_K4T;
  55   1      
  56   1          #if (EstimateAlgorithm == AO)// Ëá™ÈÄÇÂ∫î‰º∞ÁÆóÂô®Ê®°Âºè‰ΩøËÉΩ
  57   1          {
  58   2              SetBit(FOC_CR3, ESCMS);
  59   2              SetBit(FOC_CR3, MFP_EN);
  60   2              ClrBit(FOC_CR2, ESEL);
  61   2              FOC_EKLPFMIN    = OBS_EA_KS;
  62   2          }
  63   1          #elif (EstimateAlgorithm == SMO)
                  {
                      ClrBit(FOC_CR2, ESEL);
                      FOC_KSLIDE    = OBS_KSLIDE;
                      FOC_EKLPFMIN    = OBS_EA_KS;
                  }
                  #elif (EstimateAlgorithm == PLL)
                  {
                      SetBit(FOC_CR2, ESEL);
                      FOC_KSLIDE      = OBSE_PLLKP_GAIN;
                      FOC_EKLPFMIN    = OBSE_PLLKI_GAIN;
                  }
                  #else
                  {
                      #error " EstimateAlgorithm  ERR"
                  }
                  #endif    
  80   1          
  81   1          FOC_FBASE           = OBS_FBASE;
  82   1          FOC_OMEKLPF         = SPEED_KLPF;
  83   1          FOC_EBMFK           = OBS_KLPF;
  84   1          FOC_TGLI            = PWM_TGLI_LOAD;
  85   1      
  86   1          SetBit(FOC_CR1, SVPWMEN);                                                                       // SVP
             -WMÊ®°Âºè
  87   1          //  /*Ê≠£ÂèçËΩ¨*/
  88   1          //  if(mcFRState.FR==1)                                                                         // ËÆæ
             -ÁΩÆF/R
  89   1          //  {
  90   1          //    SetBit(DRV_CR,DRV_DDIR);
  91   1          //  }
  92   1          //  else
  93   1          //  {
  94   1          //    ClrBit(DRV_CR,DRV_DDIR);
  95   1          //  }
  96   1          #if (FRMODE==1)
  97   1          {
  98   2              SetBit(DRV_CR, DDIR);                                                                       // Âèç
             -ËΩ¨Ê†áÂøó‰Ωç
  99   2          }
 100   1          #endif //end FRMODE
 101   1          /* -----ËøáË∞ÉÂà∂ ----- */
 102   1          #if (OverModulation == 1)
                  {
C51 COMPILER V9.52.0.0   MOTORCONTROLFUNCTION                                              04/01/2023 22:13:42 PAGE 3   

                      SetBit(FOC_CR1, OVMDL);                                                                     // Ëøá
             -Ë∞ÉÂà∂
                  }
                  #endif                                                                                          //end 
             -OverModulation
 107   1          /* -----ÂçïÁîµÈòªÈááÊ†∑ÔºõÈúÄË¶ÅÊúÄÂ∞èÈááÊ†∑Á™ó,FOC_TRGDLY‰∏∫0Ôºå‰∏ÉÊÆµÂºèSVPWMÊñπÂºè ----- */
 108   1          #if (Shunt_Resistor_Mode == Single_Resistor)
 109   1          {
 110   2              SetReg(FOC_CR1, CSM0 | CSM1, 0x00);
 111   2              FOC_TRGDLY = 9;                                                                             // 0x0
             -cË°®Á§∫Âª∂Ëøü12‰∏™clockÔºåÊèêÂâçÁî®ÂèçÁ†ÅÂΩ¢ÂºèÔºåÂ¶Ç0x84Ë°®Á§∫ÊèêÂâç12‰∏™clock„ÄÇ
 112   2              ClrBit(FOC_CR2, F5SEG);                                                                     // 7ÊÆ
             -µÂºè
 113   2              SetReg(CMP_CR1, CMP3MOD0 | CMP3MOD1, 0x00);
 114   2              /* -----ÊúÄÂ∞èÁ™óÂè£ËÆæÁΩÆÔºåÈò≤Ê≠¢Ê∫¢Âá∫Â§ÑÁêÜ----- */
 115   2              /* -----FOC_TSMIN ÈúÄË¶ÅÂ∞è‰∫éËΩΩÊ≥¢Âë®ÊúüÁöÑ1/16 ----- */
 116   2              mcFaultDect.TempTSminValue =  PWM_TS_LOAD;
 117   2              
 118   2              if (mcFaultDect.TempTSminValue < 255)
 119   2              {
 120   3                  FOC_TSMIN = mcFaultDect.TempTSminValue;
 121   3              }
 122   2              else
 123   2              {
 124   3                  FOC_TSMIN = 255;
 125   3              }
 126   2          }
 127   1          /* -----ÂèåÁîµÈòªÈááÊ†∑ÔºåÂèØËÆæÁΩÆÊ≠ªÂå∫Ë°•ÂÅøÂÄºÔºåÂú®‰∏ãÈôçÊ≤øÁªìÊùüÂâçÂºÄÂßãÈááÊ†∑IaÔºåÈÖçÁΩÆ81 --
             ---- */
 128   1          #elif (Shunt_Resistor_Mode == Double_Resistor)                                                  
                  {
                      SetReg(FOC_CR1, CSM0 | CSM1, CSM0);
                      FOC_TSMIN = PWM_DT_LOAD;                                                                    // Ê≠ª
             -Âå∫Ë°•ÂÅøÂÄº
                      FOC_TRGDLY = 0x85;                                                                          // ADC
             -ÈááÊ†∑ÁöÑÊó∂ÂàªÔºåÈááÊ†∑Êó∂ÂàªÂú®ËÆ°Êï∞Âô®Èõ∂ÁÇπÈôÑËøëÔºå83‰∏∫‰∏ãÈôçÊ≤øÁªìÊùüÂâç3‰∏™clockÈááÊ†∑IaÔºå‰∏éÂçïÁîµÈòª‰∏çÂêå
                      /* -----01‰∏∫‰∏äÂçáÊ≤øÂºÄÂßãÂêéÁ¨¨‰∏Ä‰∏™clockÂºÄÂßãÈááÊ†∑„ÄÇÊ†πÊçÆÂÆûÈôÖÊÉÖÂÜµË∞ÉÊï¥ ----- */
                      FOC_TBLO = PWM_DLOWL_TIME;                                                                  //‰∏ãÊ
             -°•ËáÇÊúÄÂ∞èËÑâÂÜ≤Ôºå‰øùËØÅÈááÊ†∑
                      SetReg(CMP_CR1, CMP3MOD0 | CMP3MOD1, 0x00);
                      /* -----‰∫îÊÆµÂºèÊàñ‰∏ÉÊÆµÂºèÈÄâÊã© ----- */
                      #if (SVPMW_Mode == SVPWM_7_Segment)
                      {
                          ClrBit(FOC_CR2, F5SEG);
                      }
                      #elif (SVPMW_Mode == SVPWM_5_Segment)
                      {
                          SetBit(FOC_CR2, F5SEG);
                      }
                      #endif
                      #if (DouRes_Sample_Mode == DouRes_1_Cycle)
                      {
                          ClrBit(FOC_CR2, DSS);
                      }
                      #elif (DouRes_Sample_Mode == DouRes_2_Cycle)
                      {
                          SetBit(FOC_CR2, FOC_DSS);
                      }
                      #endif                                                                                    
                  }
                  /* -----‰∏âÁîµÈòªÈááÊ†∑ ----- */
                  #elif (Shunt_Resistor_Mode == Three_Resistor)                                                   
C51 COMPILER V9.52.0.0   MOTORCONTROLFUNCTION                                              04/01/2023 22:13:42 PAGE 4   

                  {
                      SetReg(FOC_CR1, CSM0 | CSM1, CSM0 | CSM1);// ‰∏âÁîµÈòª
                      FOC_TSMIN  = PWM_DT_LOAD;                                                                   // Ê≠ª
             -Âå∫Ë°•ÂÅøÂÄº
                      FOC_TRGDLY = 06;                                                                            // ADC
             -ÈááÊ†∑ÁöÑÊó∂ÂàªÔºåÈááÊ†∑Êó∂ÂàªÂú®ËÆ°Êï∞Âô®Èõ∂ÁÇπÈôÑËøëÔºå83‰∏∫‰∏ãÈôçÊ≤øÁªìÊùüÂâç3‰∏™clockÈááÊ†∑IaÔºå‰∏éÂçïÁîµÈòª‰∏çÂêå„Ä
             -Ç
                      /* -----01‰∏∫‰∏äÂçáÊ≤øÂºÄÂßãÂêéÁ¨¨‰∏Ä‰∏™clockÂºÄÂßãÈááÊ†∑„ÄÇÊ†πÊçÆÂÆûÈôÖÊÉÖÂÜµË∞ÉÊï¥ ----- */
                      SetReg(CMP_CR1, CMP3MOD0 | CMP3MOD1, CMP3MOD0 | CMP3MOD1);
                      FOC_TBLO = PWM_OVERMODULE_TIME;                                                             // Ëøá
             -Ë∞ÉÂà∂ÁîµÊµÅÈááÊ†∑Â§ÑÁêÜÁöÑTBËÑâÂÆΩ
                      /* -----‰∫îÊÆµÂºèÊàñ‰∏ÉÊÆµÂºèÈÄâÊã© ----- */
                      #if (SVPMW_Mode == SVPWM_7_Segment)
                      {
                          ClrBit(FOC_CR2, F5SEG);
                      }
                      #elif (SVPMW_Mode == SVPWM_5_Segment)
                      {
                          SetBit(FOC_CR2, F5SEG);
                      }
                      #endif  
                      #if (DouRes_Sample_Mode == DouRes_1_Cycle)
                      {
                          ClrBit(FOC_CR2, DSS);
                      }
                      #elif (DouRes_Sample_Mode == DouRes_2_Cycle)
                      {
                          SetBit(FOC_CR2, DSS);
                      }
                      #endif                                                                                      
                  }
                  #endif                                                                                          
 186   1          /* -----‰ΩøËÉΩÁîµÊµÅÂü∫ÂáÜÊ†°Ê≠£ ----- */
 187   1          #if (CalibENDIS == Enable)
 188   1          {
 189   2              if (mcCurOffset.OffsetFlag == 1)
 190   2              {
 191   3                  #if (Shunt_Resistor_Mode == Single_Resistor)                                            // Âçï
             -ÁîµÈòªÊ†°Ê≠£
 192   3                  {
 193   4                      /* -----set ibus current sample offset ----- */
 194   4                      SetReg(FOC_CR2, CSOC0 | CSOC1, 0x00);
 195   4                      FOC_CSO = mcCurOffset.Iw_busOffset;                                                 // ÂÜô
             -ÂÖ•IbusÁöÑÂÅèÁΩÆ
 196   4                      
 197   4                  }
 198   3                  #elif (Shunt_Resistor_Mode == Double_Resistor)                                          // Âèå
             -ÁîµÈòªÊ†°Ê≠£
                          {
                              /* -----set ia, ib current sample offset ----- */
                              SetReg(FOC_CR2, CSOC0 | CSOC1, CSOC0);
                              FOC_CSO  = mcCurOffset.IuOffset;                                                    // ÂÜô
             -ÂÖ•IAÁöÑÂÅèÁΩÆ
                          
                              SetReg(FOC_CR2, CSOC0 | CSOC1, CSOC1);
                              FOC_CSO  = mcCurOffset.IvOffset;                                                    // ÂÜô
             -ÂÖ•IBÁöÑÂÅèÁΩÆ
                          
                          }
                          #elif (Shunt_Resistor_Mode == Three_Resistor)                                           // ‰∏â
             -ÁîµÈòªÊ†°Ê≠£
                          {
C51 COMPILER V9.52.0.0   MOTORCONTROLFUNCTION                                              04/01/2023 22:13:42 PAGE 5   

                              /* -----set ibus current sample offset ----- */
                              SetReg(FOC_CR2, CSOC0 | CSOC1, CSOC0);
                              FOC_CSO = mcCurOffset.IuOffset;                                                     // ÂÜô
             -ÂÖ•IAÁöÑÂÅèÁΩÆ
                          
                              SetReg(FOC_CR2, CSOC0 | CSOC1, CSOC1);
                              FOC_CSO = mcCurOffset.IvOffset;                                                     // ÂÜô
             -ÂÖ•IBÁöÑÂÅèÁΩÆ
                          
                              SetReg(FOC_CR2, CSOC0 | CSOC1, 0x00);
                              FOC_CSO = mcCurOffset.Iw_busOffset;                                                 // ÂÜô
             -ÂÖ•ICÁöÑÂÅèÁΩÆ
                          }
                          #endif                                                                                  //end 
             -Shunt_Resistor_Mode
 221   3              }
 222   2          }
 223   1          #endif                                                                                          //end 
             -CalibENDIS
 224   1          /*  -------------------------------------------------------------------------------------------------
 225   1              DRV_CTLÔºöPWMÊù•Ê∫êÈÄâÊã©
 226   1              OCS = 0, DRV_COMR
 227   1              OCS = 1, FOC/SVPWM/SPWM
 228   1              -------------------------------------------------------------------------------------------------*
             -/
 229   1          /* -----ËÆ°Êï∞Âô®ÊØîËæÉÂÄºÊù•Ê∫êFOC ----- */
 230   1          SetBit(DRV_CR, OCS);
 231   1      }
 232          
 233          
 234          /** 
 235           * @brief     È¢ÑÂÆö‰ΩçÔºåÂºÄÂêØÊ≠§ÂäüËÉΩÂêØÂä®Êó∂ÂÄô‰ºöÂ∞ÜÁîµÊú∫Âº∫ÊãâÂà∞ËÆæÂÆöËßíÂ∫¶Ôºå‰πãÂêéÂÜçÂêØÂä®
 236           */
 237          void Motor_Align(void)
 238          {
 239   1          if (McStaSet.SetFlag.AlignSetFlag == 0)
 240   1          {
 241   2              McStaSet.SetFlag.AlignSetFlag = 1;
 242   2              /* -----FOCÂàùÂßãÂåñ----- */
 243   2              FOC_Init();
 244   2              /* -----ÈÖçÁΩÆÈ¢ÑÂÆö‰ΩçÁöÑÁîµÊµÅ„ÄÅKP„ÄÅKI----- */
 245   2              //        FOC_IDREF = ID_Align_CURRENT;
 246   2              //        FOC_IQREF = IQ_Align_CURRENT;
 247   2              //        FOC_DQKP = DQKP_Alignment;
 248   2              //        FOC_DQKI = DQKI_Alignment;
 249   2              FOC_EKP     = OBSW_KP_GAIN;
 250   2              FOC_EKI     = OBSW_KI_GAIN;
 251   2              SetBit(FOC_CR2, UQD);
 252   2              SetBit(FOC_CR2, UDD);
 253   2              #if (Align_Associated_Vol_EN == 0)
                      {
                          FOC__UQ = _Q15(0.0);
                          FOC__UD = UD_Duty;
                      }
                      #else
 259   2              {
 260   3                  /* -----ÂÖ≥ËÅîÁîµÂéãÔºå‰øùËØÅÊâÄÊúâÁîµÂéãÈ¢ÑÂÆö‰ΩçÂäõÁü©Ë∂≥Â§ü‰∏î‰∏çËøáÂ§ß----- */
 261   3                  mcFocCtrl.TempUDQValue = UD_K * (mcFocCtrl.mcDcbusFlt - UDMIN_Volt_VALUE) + UDMIN;
 262   3              
 263   3                  /* -----Èò≤Ê≠¢UDQÂÆö‰ΩçÂç†Á©∫ÊØîÂ§™Â§ß----- */
 264   3                  if (mcFocCtrl.TempUDQValue < _Q15(0.1))
 265   3                  {
C51 COMPILER V9.52.0.0   MOTORCONTROLFUNCTION                                              04/01/2023 22:13:42 PAGE 6   

 266   4                      FOC__UD =  mcFocCtrl.TempUDQValue;
 267   4                  }
 268   3                  else
 269   3                  {
 270   4                      FOC__UD =  _Q15(0.1);
 271   4                  }
 272   3              }
 273   2              #endif                                                                                      
 274   2              /* -----ÈÖçÁΩÆÈ¢ÑÂÆö‰ΩçËßíÂ∫¶----- */
 275   2              #if (AlignTestMode==1)
                      {
                          FOC__THETA      = Align_Theta;
                      }
                      #else
 280   2              {
 281   3                  #if (PosCheckEnable==1)
                          {
                              FOC__THETA    = mcFocCtrl.mcPosCheckAngle;
                          }
                          #else
 286   3                  {
 287   4                      FOC__THETA      = Align_Theta;
 288   4                  }
 289   3                  #endif                                                                                  
 290   3              }
 291   2              #endif                                                                                       
 292   2              /* -----PLLÊàñSMO----- */
 293   2              #if (EstimateAlgorithm == SMO  || EstimateAlgorithm == AO)
 294   2              {
 295   3                  FOC__ETHETA   = FOC__THETA - 4096;
 296   3              }
 297   2              #elif (EstimateAlgorithm == PLL)
                      {
                          FOC__ETHETA   = FOC__THETA;
                      }
                      #endif                                                                                    
 302   2              TimeCnt = FOC__THETA;
 303   2              /* -----‰ΩøËÉΩËæìÂá∫----- */
 304   2              DRV_CMR |= 0x3F;                                                                            // U„Ä
             -ÅV„ÄÅWÁõ∏ËæìÂá∫
 305   2              MOE = 1;
 306   2          }
 307   1      }
 308          
 309          
 310          /** 
 311           * @brief     ÈùôÊ≠¢ÂêØÂä®ÈÖçÁΩÆÂáΩÊï∞
 312           */
 313          void Motor_Open(void)
 314          {
 315   1           #if (AlignTestMode==0)
 316   1          {
 317   2              DRV_CMR |= 0x3F;                                                                            // U„Ä
             -ÅV„ÄÅWÁõ∏ËæìÂá∫
 318   2              MOE = 1;
 319   2          }
 320   1          #endif
 321   1          #if (Open_Start_Mode == Open_Start)
                  {
                      static uint8 OpenRampCycles;                                                                // Âê¶
             -ÂàôÂÆö‰πâ‰∫ÜÊ≤°Ë∞ÉÁî®Ôºålint‰ºöÊä•Ë≠¶Âëä
                  }
C51 COMPILER V9.52.0.0   MOTORCONTROLFUNCTION                                              04/01/2023 22:13:42 PAGE 7   

                  #endif
 326   1          
 327   1          if (McStaSet.SetFlag.StartSetFlag == 0)
 328   1          {
 329   2              McStaSet.SetFlag.StartSetFlag = 1;
 330   2              /* -----ÂêØÂä®ÂàùÂßãËßíÂ∫¶ËµãÂÄº----- */
 331   2              #if (PosCheckEnable)
                      {
                          FOC__THETA  = mcFocCtrl.mcPosCheckAngle;                                                // Êúâ
             -ÂàùÂßã‰ΩçÁΩÆÊ£ÄÊµãÔºåÂàôÁî®ÂàùÂßã‰ΩçÁΩÆËßí
                      }
                      #else
 336   2              {
 337   3                  FOC__THETA  = Align_Theta;                                                              // Êó†
             -ÂàùÂßã‰ΩçÁΩÆÊ£ÄÊµãÔºåÂàôÁî®È¢ÑÂÆö‰ΩçËßí
 338   3              }
 339   2              #endif
 340   2              /* -----PLLÊàñSMO----- */
 341   2              #if (EstimateAlgorithm == SMO  || EstimateAlgorithm == AO)
 342   2              {
 343   3                  FOC__ETHETA = FOC__THETA - 4915;
 344   3              }
 345   2              #elif (EstimateAlgorithm == PLL)
                      {
                          FOC__ETHETA = FOC__THETA;
                      }
                      #endif                                                                                      
 350   2              TimeCnt = FOC__ETHETA;                                                                 
 351   2              /* -----ÂêØÂä®ÁîµÊµÅ„ÄÅKP„ÄÅKI„ÄÅFOC_EKP„ÄÅFOC_EKI----- */
 352   2              FOC_IDREF = ID_Start_CURRENT;                                                               // DËΩ
             -¥ÂêØÂä®ÁîµÊµÅ
 353   2              mcFocCtrl.mcIqref = IQ_Start_CURRENT;                                                       // QËΩ
             -¥ÂêØÂä®ÁîµÊµÅ
 354   2              #if (TailWind_Mode==BEMFMethod)
 355   2              {
 356   3                  if (BEMFDetect.BEMFCCWFlag == 1)
 357   3                  {
 358   4                      mcFocCtrl.mcIqref += I_Value(0.95);                                                 // ÈÄÜ
             -È£éÊó∂ÔºåÂä†Â§ßÂêØÂä®ÁîµÊµÅ
 359   4                  }
 360   3                  else if (BEMFDetect.BEMFCCWFlag == 2)
 361   3                  {
 362   4                      mcFocCtrl.mcIqref += I_Value(0.8);                                                  // ÈÄÜ
             -È£éÊó∂ÔºåÂä†Â§ßÂêØÂä®ÁîµÊµÅ
 363   4                  }
 364   3              }
 365   2              #elif (TailWind_Mode==RSDMethod)
                      {
                          if ((RSDDetect.RSDCCWFlag == 1) || (RSDDetect.RSDCCWTimes >= 4))
                          {
                              mcFocCtrl.mcIqref += I_Value(0.95);                                                 // ÈÄÜ
             -È£éÊó∂ÔºåÂä†Â§ßÂêØÂä®ÁîµÊµÅ
                          }
                          else if (RSDDetect.RSDCCWFlag == 2)
                          {
                              mcFocCtrl.mcIqref += I_Value(0.9);                                                  // ÈÄÜ
             -È£éÊó∂ÔºåÂä†Â§ßÂêØÂä®ÁîµÊµÅ
                          }
                      }
                      #endif
 377   2              FOC_DQKP    = DQKPStart;
 378   2              FOC_DQKI    = DQKIStart;
C51 COMPILER V9.52.0.0   MOTORCONTROLFUNCTION                                              04/01/2023 22:13:42 PAGE 8   

 379   2              FOC_EKP     = OBSW_KP_GAIN;
 380   2              FOC_EKI     = OBSW_KI_GAIN;
 381   2              /* -----ÂêØÂä®ÊñπÂºèÈÄâÊã©----- */
 382   2              #if (Open_Start_Mode == Omega_Start)                                                        // Ome
             -ga ÂêØÂä®
 383   2              {
 384   3                  FOC_EFREQACC    = Motor_Omega_Ramp_ACC;
 385   3                  FOC_EFREQMIN    = Motor_Omega_Ramp_Min;
 386   3                  FOC_EFREQHOLD   = Motor_Omega_Ramp_End;
 387   3                  SetBit(FOC_CR1, EFAE);                                                                  // ‰º∞
             -ÁÆóÂô®Âº∫Âà∂ËæìÂá∫
 388   3                  ClrBit(FOC_CR1, RFAE);                                                                  // Á¶Å
             -Ê≠¢Âº∫Êãâ
 389   3                  SetBit(FOC_CR1, ANGM);                                                                  // ‰º∞
             -ÁÆóÊ®°Âºè
 390   3              }
 391   2              #elif (Open_Start_Mode == Open_Start)
                      {
                          FOC_RTHEACC     = Motor_Open_Ramp_ACC;                                                  // Áà¨
             -Âù°ÂáΩÊï∞ÁöÑÂàùÂßãÂä†ÈÄüÂ∫¶
                          FOC__RTHESTEP   = Motor_Open_Ramp_Min;                                                  // 0.6
             -2 degree acce speed
                          RPDPara.ThetaGet = Motor_Open_Ramp_Min;
                          FOC__RTHECNT    = MOTOR_OPEN_ACC_CNT;                                                   // acc
             -e time
                          ClrBit(FOC_CR1, EFAE);                                                                  // ‰º∞
             -ÁÆóÂô®Âº∫Âà∂ËæìÂá∫
                          SetBit(FOC_CR1, RFAE);                                                                  // Á¶Å
             -Ê≠¢Âº∫Êãâ
                          ClrBit(FOC_CR1, ANGM);                                                                  // ‰º∞
             -ÁÆóÊ®°Âºè
                      }
                      #elif (Open_Start_Mode == Open_Omega_Start)
                      {
                          FOC_RTHEACC     = Motor_Open_Ramp_ACC;                                                  // Áà¨
             -Âù°ÂáΩÊï∞ÁöÑÂàùÂßãÂä†ÈÄüÂ∫¶
                          FOC__RTHESTEP   = Motor_Open_Ramp_Min;                                                  // 0.6
             -2 degree acce speed
                          FOC__RTHECNT    = MOTOR_OPEN_ACC_CNT;                                                   // acc
             -e time
                          FOC_EFREQACC    = Motor_Omega_Ramp_ACC;
                          FOC_EFREQMIN    = Motor_Omega_Ramp_Min;
                          FOC_EFREQHOLD   = Motor_Omega_Ramp_End;
                          SetBit(FOC_CR1, EFAE);                                                                  // ‰º∞
             -ÁÆóÂô®Âº∫Âà∂ËæìÂá∫
                          SetBit(FOC_CR1, RFAE);                                                                  // Á¶Å
             -Ê≠¢Âº∫Êãâ
                          SetBit(FOC_CR1, ANGM);                                                                  // ‰º∞
             -ÁÆóÊ®°Âºè
                      }
                      #endif                                                                                     
 414   2          }
 415   1          
 416   1          /* -----‰∏çÂêåÂêØÂä®ÊñπÂºè‰∏ãÔºåÂàáÊç¢Âà∞MCRUNÁä∂ÊÄÅ----- */
 417   1          #if (Open_Start_Mode == Open_Start)                                                             //OPEN
             -Áä∂ÊÄÅÂêØÂä®Êó∂ÊãñÂä®Â§öÊ¨°
                  {
                      
                      mcFocCtrl.State_Count = 20;                                                              
                      FOC_EKP = OBSW_KP_GAIN_RUN4;                                                                // ‰º∞
             -ÁÆóÂô®ÈáåÁöÑPIÁöÑKP
                      FOC_EKI = OBSW_KI_GAIN_RUN4;                                                                // ‰º∞
C51 COMPILER V9.52.0.0   MOTORCONTROLFUNCTION                                              04/01/2023 22:13:42 PAGE 9   

             -ÁÆóÂô®ÈáåÁöÑPIÁöÑKI
                  }
                  #elif (Open_Start_Mode == Open_Omega_Start)
                  {
                      mcFocCtrl.State_Count = 2500;   //Âçï‰ΩçÔºö1ms
                      
                  }
                  #elif (Open_Start_Mode == Omega_Start)
 430   1          {
 431   2              /* -----PLLÊàñSMO----- */
 432   2              #if (EstimateAlgorithm == SMO  || EstimateAlgorithm == AO)
 433   2              {
 434   3                  mcFocCtrl.State_Count = 700;    //Âçï‰ΩçÔºö1ms
 435   3              }
 436   2              #elif (EstimateAlgorithm == PLL)
                      {
                          mcFocCtrl.State_Count = 1400;    //Âçï‰ΩçÔºö1ms
                          FOC_EKP = OBSW_KP_GAIN_RUN1;                                                            // ‰º∞
             -ÁÆóÂô®ÈáåÁöÑPIÁöÑKP
                          FOC_EKI = OBSW_KI_GAIN_RUN1;                                                            // ‰º∞
             -ÁÆóÂô®ÈáåÁöÑPIÁöÑKI
                      }
                      #endif                                                                                      
 443   2              
 444   2          }
 445   1          #endif                                             
 446   1          LowSpeedObserverInit();
 447   1          FOC_IQREF = mcFocCtrl.mcIqref;                                                                  // QËΩ
             -¥ÂêØÂä®ÁîµÊµÅ
 448   1      }
 449          
 450          
 451          /** 
 452           * @brief     È°∫È£éÈÄÜÈ£éÂèÇÊï∞ÈÖçÁΩÆÂáΩÊï∞
 453           */
 454          void Motor_TailWind(void)
 455          {
 456   1          if (mcFocCtrl.State_Count == 0)
 457   1          {
 458   2              if (McStaSet.SetFlag.TailWindSetFlag  == 0)                                                 //ÂàùÂ
             -ßãÂåñ
 459   2              {
 460   3                  McStaSet.SetFlag.TailWindSetFlag = 1;
 461   3                  #if (TailWind_Mode==RSDMethod)
                          {
                              RSDDetectInit();
                          }
                          #elif (TailWind_Mode==BEMFMethod)
 466   3                  {
 467   4                      BEMFDetectInit();
 468   4                  }
 469   3                  #endif
 470   3              }
 471   2              
 472   2              if (McStaSet.SetFlag.TailWindSetFlag == 1)
 473   2              {
 474   3                  #if (TailWind_Mode==RSDMethod)
                          {
                              RSDDealwith();
                          }
                          #elif (TailWind_Mode==BEMFMethod)
 479   3                  {
C51 COMPILER V9.52.0.0   MOTORCONTROLFUNCTION                                              04/01/2023 22:13:42 PAGE 10  

 480   4                      BEMFDealwith();
 481   4                  }
 482   3                  #endif
 483   3              }
 484   2          }
 485   1      }
 486          
 487          /**
 488           * @brief    Á¨¨‰∏ÄÊ¨°‰∏äÁîµÂàùÂßãÂåñÂèòÈáè
 489           */
 490          void MotorcontrolInit(void)
 491          {
 492   1          /* -----ÁîµÊú∫ÁõÆÊ†áÊñπÂêë----- */
 493   1          mcFRState.TargetFR                 = (uint8)(FRMODE);
 494   1          /* -----ÁîµÊµÅÂÅèÁΩÆÊ†°ÂáÜÂèòÈáè----- */
 495   1          mcCurOffset.IuOffsetSum            = 16383;
 496   1          mcCurOffset.IvOffsetSum            = 16383;
 497   1          mcCurOffset.Iw_busOffsetSum        = 16383;
 498   1          /* -----LEDÁÅØÂìçÂ∫î----- */
 499   1          mcLedDisplay.Counttime             = 4999;
 500   1          /* -----ÈÄüÂ∫¶ÁéØÁöÑÂìçÂ∫î----- */
 501   1          mcSpeedRamp.DelayPeriod           = 10;
 502   1      }
 503          
 504          
 505          /** 
 506           * @brief     ÂàùÂßãÂåñÁîµÊú∫ÂèÇÊï∞ÔºåÊØèÊ¨°ÁîµÊú∫ÈáçÂêØÂùá‰ºöË¢´Ë∞ÉÁî®
 507           * @warning   ÈúÄË¶ÅÊ≥®ÊÑèÂ°´ÂÜôÁöÑÂèòÈáèÊòØÂê¶ÂèØ‰ª•Âú®Ê≠§Êó∂ÂàªË¢´ÂàùÂßãÂåñ
 508           */
 509          void VariablesPreInit(void)
 510          {
 511   1          /* -----‰øùÊä§----- */
 512   1          mcFaultSource = 0;
 513   1          memset(&mcFaultDect, 0, sizeof(FaultVarible));                                                  // Fau
             -ltVaribleÂèòÈáèÊ∏ÖÈõ∂
 514   1          /* -----Â§ñÈÉ®ÊéßÂà∂ÁéØ----- */
 515   1          memset(&mcFocCtrl, 0, sizeof(FOCCTRL));                                                         // mcF
             -ocCtrlÂèòÈáèÊ∏ÖÈõ∂
 516   1          /* -----È°∫ÈÄÜÈ£éÂà§Êñ≠----- */
 517   1          #if (TailWind_Mode==RSDMethod)
                  {
                      RSDDetect.RSDCCWTimes    = 0;                                                               //  CC
             -WÂàπËΩ¶Ê¨°Êï∞Ê∏ÖÈõ∂
                  }
                  #elif (TailWind_Mode==BEMFMethod)
 522   1          {
 523   2          }
 524   1          #elif (TailWind_Mode==FOCMethod)
                  {
                      memset(&TailWindDetect, 0, sizeof(MotorTailWindTypeDef));                                   //  Ta
             -ilWindDetectÊâÄÊúâÂèòÈáèÊ∏ÖÈõ∂
                  }
                  #endif
 529   1          /* -----ÁîµÊú∫Áä∂ÊÄÅÊú∫Êó∂Â∫èÂèòÈáè----- */
 530   1          McStaSet.SetMode                   = 0;
 531   1          /* -----LEDÁÅØÂìçÂ∫î----- */
 532   1          memset(&mcLedDisplay, 0, sizeof(MCLedDisplay));                                                 // mcL
             -edDisplayÂèòÈáèÊ∏ÖÈõ∂
 533   1          mcLedDisplay.Counttime            = 4999;
 534   1          /* -----ÁîµÊú∫ÂäüÁéáÂèÇÊï∞ÂàùÂßãÂåñ----- */
 535   1          Power_Currt                         = 0;
 536   1      }
C51 COMPILER V9.52.0.0   MOTORCONTROLFUNCTION                                              04/01/2023 22:13:42 PAGE 11  

 537          
 538          
 539          /** 
 540           * @brief     ‰∏äÁîµÊó∂ÔºåÂÖàÂØπÁ°¨‰ª∂ÁîµË∑ØÁöÑÁîµÊµÅËøõË°åÈááÈõÜÔºåÂÜôÂÖ•ÂØπÂ∫îÁöÑÊ†°ÂáÜÂØÑÂ≠òÂô®‰∏≠„ÄÇ
 541                        Ë∞ÉËØïÊó∂ÔºåÈúÄËßÇÂØümcCurOffsetÁªìÊûÑ‰Ωì‰∏≠ÂØπÂ∫îÂèòÈáèÊòØÂê¶Âú®ËåÉÂõ¥ÂÜÖ„ÄÇÈááÈõÜÁªìÊùüÂêé
             -ÔºåOffsetFlagÁΩÆ1„ÄÇ
 542           */
 543          void GetCurrentOffset(void)
 544          {
 545   1          if (mcCurOffset.OffsetFlag == 0)
 546   1          {
 547   2              SetBit(ADC_CR, ADCBSY);                                                                     // ‰Ωø
             -ËÉΩADC
 548   2              
 549   2              while (ReadBit(ADC_CR, ADCBSY));
 550   2              
 551   2              #if (Shunt_Resistor_Mode == Single_Resistor)                                                // Âçï
             -ÁîµÈòªÊ®°ÂºèÔºå‰∏äÁîµÈ™åËØÅÁ°¨‰ª∂ÁîµË∑ØÊó∂ÔºåÈúÄËßÇÂØümcCurOffset.IbusOffsetÊòØÂê¶‰∏∫4096
 552   2              {
 553   3                  mcCurOffset.Iw_busOffsetSum += ((ADC4_DR & 0x0fff) << 3);
 554   3                  mcCurOffset.Iw_busOffset = mcCurOffset.Iw_busOffsetSum >> 4;
 555   3                  mcCurOffset.Iw_busOffsetSum -= mcCurOffset.Iw_busOffset;
 556   3              }
 557   2              #elif (Shunt_Resistor_Mode == Double_Resistor)                                              // Âèå
             -ÁîµÈòªÊ®°ÂºèÔºå‰∏äÁîµÈ™åËØÅÁ°¨‰ª∂ÁîµË∑ØÊó∂ÔºåÈúÄËßÇÂØümcCurOffset.IaOffset„ÄÅmcCurOffset.IbOffsetÊòØÂê¶‰∏∫4096
                      {
                          mcCurOffset.IuOffsetSum += ((ADC0_DR & 0x0fff) << 3);
                          mcCurOffset.IuOffset = mcCurOffset.IuOffsetSum >> 4;
                          mcCurOffset.IuOffsetSum -= mcCurOffset.IuOffset;
                          mcCurOffset.IvOffsetSum += ((ADC1_DR & 0x0fff) << 3);
                          mcCurOffset.IvOffset = mcCurOffset.IvOffsetSum >> 4;
                          mcCurOffset.IvOffsetSum -= mcCurOffset.IvOffset;
                      }
                      #elif (Shunt_Resistor_Mode == Three_Resistor)                                               // ‰∏â
             -ÁîµÈòªÊ®°ÂºèÔºå‰∏äÁîµÈ™åËØÅÁ°¨‰ª∂ÁîµË∑ØÊó∂ÔºåÈúÄËßÇÂØümcCurOffset.IaOffset„ÄÅmcCurOffset.IbOffset„ÄÅmcCurOffset.IcOffset
             -ÊòØÂê¶‰∏∫4096
                      {
                          mcCurOffset.IuOffsetSum += ((ADC0_DR & 0x0fff) << 3);
                          mcCurOffset.IuOffset = mcCurOffset.IuOffsetSum >> 4;
                          mcCurOffset.IuOffsetSum -= mcCurOffset.IuOffset;
                          mcCurOffset.IvOffsetSum += ((ADC1_DR & 0x0fff) << 3);
                          mcCurOffset.IvOffset = mcCurOffset.IvOffsetSum >> 4;
                          mcCurOffset.IvOffsetSum -= mcCurOffset.IvOffset;
                          mcCurOffset.Iw_busOffsetSum += ((ADC4_DR & 0x0fff) << 3);
                          mcCurOffset.Iw_busOffset = mcCurOffset.Iw_busOffsetSum >> 4;
                          mcCurOffset.Iw_busOffsetSum -= mcCurOffset.Iw_busOffset;
                      }
                      #endif
 579   2              mcCurOffset.OffsetCount++;
 580   2              
 581   2              if (mcCurOffset.OffsetCount > Calib_Time)
 582   2              {
 583   3                  mcCurOffset.OffsetFlag = 1;
 584   3                  #if (GetCurrentOffsetEnable)
                          {
                            Fault_GetCurrentOffset();                                                             // ÂÅè
             -ÁΩÆÁîµÂéã‰øùÊä§
                          }
                          #endif
 589   3              }
 590   2          }
 591   1      }
C51 COMPILER V9.52.0.0   MOTORCONTROLFUNCTION                                              04/01/2023 22:13:42 PAGE 12  

 592          
 593          /** 
 594           * @brief     ÂÖ≥Èó≠ËæìÂá∫ÔºåÂÖ≥Èó≠FOCÔºåÁîµÊú∫ÂàáÊç¢Âà∞mcReadyÁä∂ÊÄÅË¢´Ë∞ÉÁî®‰∏ÄÊ¨°
 595           */
 596          void Motor_Ready(void)
 597          {
 598   1          if (McStaSet.SetFlag.CalibFlag == 0)
 599   1          {
 600   2              McStaSet.SetFlag.CalibFlag = 1;
 601   2              MOE            = 0;                                                                         // ÂÖ≥
             -Èó≠MOE
 602   2              ClrBit(DRV_CR, FOCEN);                                                                      // ÂÖ≥
             -Èó≠FOC     
 603   2              SetBit(ADC_MASK_SYSC, CH7EN | CH4EN | CH3EN | CH2EN | CH1EN | CH0EN);                       // ÂºÄ
             -ÂêØADC        
 604   2          }
 605   1      }
 606          
 607          
 608          /** 
 609           * @brief     ÁîµÊú∫ÂàùÂßãÂåñÔºåÂØπÁîµÊú∫Áõ∏ÂÖ≥ÂèòÈáè„ÄÅPIËøõË°åÂàùÂßãÂåñËÆæÁΩÆ,ÂÖ≥Èó≠FOCÊâÄÈúÄË¶Å‰ΩøÁî®Âà
             -∞ÁöÑADC
 610           * @note      ÂÖ≥Èó≠FOCÊâÄÈúÄË¶Å‰ΩøÁî®Âà∞ÁöÑADCÔºåFOCÊ®°Âùó‰ºöËá™Âä®Ë∞ÉÁî®Áõ∏Â∫îADC Êó†ÈúÄÂ§ñÈÉ®‰ΩøËÉΩ
 611           */
 612          void Motor_Init(void)
 613          {
 614   1          ClrBit(ADC_MASK_SYSC, CH4EN |  CH1EN | CH0EN);                                                  // ÂÖ≥
             -Èó≠ËΩØ‰ª∂ÁîµÊµÅÈááÊ†∑ÁöÑADC
 615   1          VariablesPreInit();                                                                             // Áîµ
             -Êú∫Áõ∏ÂÖ≥ÂèòÈáèÂàùÂßãÂåñ
 616   1          PI_Init();                                                                                      // PIÂ
             -àùÂßãÂåñ
 617   1          SpeedPIDInit();
 618   1          McStaSet.SetFlag.TailWindSetFlag = 0;
 619   1      }
 620          
 621          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1176    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    121    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
